// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "identity.proto" (package "com.betuiasi.server", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.betuiasi.server.AuthenticationRequest
 */
export interface AuthenticationRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message com.betuiasi.server.AuthenticationResponse
 */
export interface AuthenticationResponse {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message com.betuiasi.server.ValidateRequest
 */
export interface ValidateRequest {
    /**
     * @generated from protobuf field: string valid = 1;
     */
    valid: string;
}
/**
 * @generated from protobuf message com.betuiasi.server.ValidateResponse
 */
export interface ValidateResponse {
    /**
     * @generated from protobuf field: string valid = 1;
     */
    valid: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticationRequest$Type extends MessageType<AuthenticationRequest> {
    constructor() {
        super("com.betuiasi.server.AuthenticationRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }

  override create(value?: PartialMessage<AuthenticationRequest>): AuthenticationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<AuthenticationRequest>(this, message, value);
        return message;
    }
    // internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticationRequest): AuthenticationRequest {
    //     let message = target ?? this.create(), end = reader.pos + length;
    //     while (reader.pos < end) {
    //         let [fieldNo, wireType] = reader.tag();
    //         switch (fieldNo) {
    //             case /* string username */ 1:
    //                 message.username = reader.string();
    //                 break;
    //             case /* string password */ 2:
    //                 message.password = reader.string();
    //                 break;
    //             default:
    //                 let u = options.readUnknownField;
    //                 if (u === "throw")
    //                     throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
    //                 let d = reader.skip(wireType);
    //                 if (u !== false)
    //                     (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
    //         }
    //     }
    //     return message;
    // }
    // internalBinaryWrite(message: AuthenticationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    //     /* string username = 1; */
    //     if (message.username !== "")
    //         writer.tag(1, WireType.LengthDelimited).string(message.username);
    //     /* string password = 2; */
    //     if (message.password !== "")
    //         writer.tag(2, WireType.LengthDelimited).string(message.password);
    //     let u = options.writeUnknownFields;
    //     if (u !== false)
    //         (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    //     return writer;
    // }
}
/**
 * @generated MessageType for protobuf message com.betuiasi.server.AuthenticationRequest
 */
export const AuthenticationRequest = new AuthenticationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticationResponse$Type extends MessageType<AuthenticationResponse> {
    constructor() {
        super("com.betuiasi.server.AuthenticationResponse", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }

  override create(value?: PartialMessage<AuthenticationResponse>): AuthenticationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<AuthenticationResponse>(this, message, value);
        return message;
    }
    // internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticationResponse): AuthenticationResponse {
    //     let message = target ?? this.create(), end = reader.pos + length;
    //     while (reader.pos < end) {
    //         let [fieldNo, wireType] = reader.tag();
    //         switch (fieldNo) {
    //             case /* string token */ 1:
    //                 message.token = reader.string();
    //                 break;
    //             default:
    //                 let u = options.readUnknownField;
    //                 if (u === "throw")
    //                     throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
    //                 let d = reader.skip(wireType);
    //                 if (u !== false)
    //                     (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
    //         }
    //     }
    //     return message;
    // }
    // internalBinaryWrite(message: AuthenticationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    //     /* string token = 1; */
    //     if (message.token !== "")
    //         writer.tag(1, WireType.LengthDelimited).string(message.token);
    //     let u = options.writeUnknownFields;
    //     if (u !== false)
    //         (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    //     return writer;
    // }
}
/**
 * @generated MessageType for protobuf message com.betuiasi.server.AuthenticationResponse
 */
export const AuthenticationResponse = new AuthenticationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateRequest$Type extends MessageType<ValidateRequest> {
    constructor() {
        super("com.betuiasi.server.ValidateRequest", [
            { no: 1, name: "valid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }

  override create(value?: PartialMessage<ValidateRequest>): ValidateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.valid = "";
        if (value !== undefined)
            reflectionMergePartial<ValidateRequest>(this, message, value);
        return message;
    }
    // internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateRequest): ValidateRequest {
    //     let message = target ?? this.create(), end = reader.pos + length;
    //     while (reader.pos < end) {
    //         let [fieldNo, wireType] = reader.tag();
    //         switch (fieldNo) {
    //             case /* string valid */ 1:
    //                 message.valid = reader.string();
    //                 break;
    //             default:
    //                 let u = options.readUnknownField;
    //                 if (u === "throw")
    //                     throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
    //                 let d = reader.skip(wireType);
    //                 if (u !== false)
    //                     (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
    //         }
    //     }
    //     return message;
    // }
    // internalBinaryWrite(message: ValidateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    //     /* string valid = 1; */
    //     if (message.valid !== "")
    //         writer.tag(1, WireType.LengthDelimited).string(message.valid);
    //     let u = options.writeUnknownFields;
    //     if (u !== false)
    //         (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    //     return writer;
    // }
}
/**
 * @generated MessageType for protobuf message com.betuiasi.server.ValidateRequest
 */
export const ValidateRequest = new ValidateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateResponse$Type extends MessageType<ValidateResponse> {
    constructor() {
        super("com.betuiasi.server.ValidateResponse", [
            { no: 1, name: "valid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }

  override create(value?: PartialMessage<ValidateResponse>): ValidateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.valid = "";
        if (value !== undefined)
            reflectionMergePartial<ValidateResponse>(this, message, value);
        return message;
    }
    // internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateResponse): ValidateResponse {
    //     let message = target ?? this.create(), end = reader.pos + length;
    //     while (reader.pos < end) {
    //         let [fieldNo, wireType] = reader.tag();
    //         switch (fieldNo) {
    //             case /* string valid */ 1:
    //                 message.valid = reader.string();
    //                 break;
    //             default:
    //                 let u = options.readUnknownField;
    //                 if (u === "throw")
    //                     throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
    //                 let d = reader.skip(wireType);
    //                 if (u !== false)
    //                     (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
    //         }
    //     }
    //     return message;
    // }
    // internalBinaryWrite(message: ValidateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    //     /* string valid = 1; */
    //     if (message.valid !== "")
    //         writer.tag(1, WireType.LengthDelimited).string(message.valid);
    //     let u = options.writeUnknownFields;
    //     if (u !== false)
    //         (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    //     return writer;
    // }
}
/**
 * @generated MessageType for protobuf message com.betuiasi.server.ValidateResponse
 */
export const ValidateResponse = new ValidateResponse$Type();
/**
 * @generated ServiceType for protobuf service com.betuiasi.server.AuthenticationService
 */
export const AuthenticationService = new ServiceType("com.betuiasi.server.AuthenticationService", [
    { name: "authenticate", options: {}, I: AuthenticationRequest, O: AuthenticationResponse },
    { name: "validate", options: {}, I: ValidateRequest, O: ValidateResponse }
]);
