// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "identity.proto" (package "com.betuiasi.server", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthenticationService } from "./identity";
import type { ValidateResponse } from "./identity";
import type { ValidateRequest } from "./identity";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AuthenticationResponse } from "./identity";
import type { AuthenticationRequest } from "./identity";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service com.betuiasi.server.AuthenticationService
 */
export interface IAuthenticationServiceClient {
    /**
     * @generated from protobuf rpc: authenticate(com.betuiasi.server.AuthenticationRequest) returns (com.betuiasi.server.AuthenticationResponse);
     */
    authenticate(input: AuthenticationRequest, options?: RpcOptions): UnaryCall<AuthenticationRequest, AuthenticationResponse>;
    /**
     * @generated from protobuf rpc: validate(com.betuiasi.server.ValidateRequest) returns (com.betuiasi.server.ValidateResponse);
     */
    validate(input: ValidateRequest, options?: RpcOptions): UnaryCall<ValidateRequest, ValidateResponse>;
}
/**
 * @generated from protobuf service com.betuiasi.server.AuthenticationService
 */
export class AuthenticationServiceClient implements IAuthenticationServiceClient, ServiceInfo {
    typeName = AuthenticationService.typeName;
    methods = AuthenticationService.methods;
    options = AuthenticationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: authenticate(com.betuiasi.server.AuthenticationRequest) returns (com.betuiasi.server.AuthenticationResponse);
     */
    authenticate(input: AuthenticationRequest, options?: RpcOptions): UnaryCall<AuthenticationRequest, AuthenticationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthenticationRequest, AuthenticationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: validate(com.betuiasi.server.ValidateRequest) returns (com.betuiasi.server.ValidateResponse);
     */
    validate(input: ValidateRequest, options?: RpcOptions): UnaryCall<ValidateRequest, ValidateResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ValidateRequest, ValidateResponse>("unary", this._transport, method, opt, input);
    }
}
